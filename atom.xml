<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lambda Not Found]]></title>
  <link href="http://innocentim.github.io/atom.xml" rel="self"/>
  <link href="http://innocentim.github.io/"/>
  <updated>2013-04-29T17:43:48+08:00</updated>
  <id>http://innocentim.github.io/</id>
  <author>
    <name><![CDATA[Tim Shen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[少即极多]]></title>
    <link href="http://innocentim.github.io/blog/2013/04/25/less-is-exponentially-more/"/>
    <updated>2013-04-25T16:44:00+08:00</updated>
    <id>http://innocentim.github.io/blog/2013/04/25/less-is-exponentially-more</id>
    <content type="html"><![CDATA[<p>看到<a href="http://www.yinwang.org/blog-cn/2013/04/24/go-language/">王垠的blog</a>, 我坐不住了, 准备借机炒个冷饭. 我批评王垠的思路和&#8221;我喜欢香蕉, 你给个我苹果, 然后你说你为我付出了很多&#8221;很像. 另外一如既往地, 废话很多. 很抱歉, Go的设计哲学就是组合, 崇尚正交, 用最小的原子集合提供优雅强大的表达能力; 所以我们看到的新的点不多, 但是新的组合不少.</p>

<p>Rob Pike这篇文章有点老了, 而且我也翻译得颇生涩. 戳<a href="http://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">这里</a>看原文.</p>

<p>===================</p>

<p>这是我在2012年6月的Go SF上演讲的文本.</p>

<p>这是一个个人演讲. 我承认, 虽然面前的团队让Go诞生并延续, 但是我的观点并不代表任何其他Go语言小组成员的意见. 我也想感谢Go SF的组织者提供这个和你们交流的机会.</p>

<p>几星期前我被问起:“你在推出Go的过程中遇到的最大的惊奇是什么?&#8221;我立即意识到了答案: 虽然我们希望C++程序员意识到Go是个较好的选择, 但是令人意外的是, 大多数Go程序员来自Python和Ruby这样的动态语言, 而很少有来自C++的.</p>

<p>我们&#8212;&#8212;Ken, Robert和我&#8212;&#8212;是C++程序员(译者: Ken也用C++?), 当时在为解决我们所写的这类软件产生的问题设计一个新的语言. 这似乎有点自相矛盾, 因为别的C++程序员根本不关心这些问题, 更不会去设计一个语言.</p>

<p>我今天想说的是关于那些激发我们创造Go的事情, 和为什么它本不应令我们如此惊讶. 我保证这些内容更多与Go相关而不是C++, 所以即使你不很了解C++你也能跟得上.</p>

<p>回答可以这样归结: 你认为&#8221;少即是多&#8221;呢, 还是&#8221;少就是少&#8221;?</p>

<p>这里有个比喻, 但是真事. 贝尔实验室中心原来发放3位数号码: 物理研究是111, 计算科学研究是127, 等等. 1980年代早期, 一个便笺飞过来说&#8221;鉴于你们对研究的理解有所加深, 将为你们的号码多加上一位, 以便更好地体现你们的工作&#8221;. 所以我们中心的号码变成了1127. Ron Hardin半当真地开玩笑说如果我们真的理解我们的世界更好一点的话, 我们将丢掉一位数字, 将127变成27. 当然主管没听到这个笑话(这也不是我们希望的), 但是我想这里面有点值得思考的东西. 少即是多. 你理解得越好, 你将变得越简洁.</p>

<p>先记住这句话.</p>

<p>回到2007年9月, 我在做一个庞大的Google C++项目的细微但核心的部分. 开发必须交互进行, 但是我这部分在我们的Google编译集群上要编译45分钟. 同时, 有个消息传过来说一群在C++社区的Google员工将开一场讲座, 介绍即将到来的C++0x(现在称为C++11).</p>

<p>在那场持续一小时的讲座中, 我们听说了诸如计划中的35个新特性的说法&#8212;&#8212;事实上还有更多, 但是那场讲座只说有35个. 有些特性当然是细微的, 但是讲座中谈到的至少是足够重要的. 提到的特性中, 有些十分微妙并难以理解, 比如右值引用(rvalue references); 有些特别符合C++范儿, 比如可变参数模板(variadic templates); 还有些十分疯狂, 比如用户定义字面量(user-defined literals).</p>

<p>那时候我问了自己一个问题: C++社区真的觉得C++错在没有足够多的特性么? 显然, 从Ron Hardin的笑话的角度看, 简化语言将比添加新特性取得更好的效果. 当然, 对C++来说这很不靠谱, 但是先记住这点.</p>

<p>在这场讲座的几个月之前我做了一场讲座(你可以通过<a href="http://video.google.com/videoplay?docid=810232012617965344">YouTube</a>看到), 讲的是一个我1980年代做的一个玩具并发编程语言. 这个语言叫<a href="ftp://cs.bell-labs.com/cm/cs/who/rsc/thread/newsqueak.pdf">Newsqueak</a>, 而且显然地, 它成为了Go的前身.</p>

<p>在我在Google工作的过程中, 我发现我丢掉了Newsqueak中的一些点子. 现在我将重新思考它们, 所以我才做了那场讲座. 我相信它们会让服务器端编程变得更容易, 而且Google能真正从中获益.</p>

<p>我真的尝试将这些点子加入到C++中, 可惜失败了. 我实在难以将一组并发操作融入到C++的控制流程中去——当真融进去的话, 它们将变得十分丑陋, 从而难以看到优越性. 另外, C++将它变得十分笨拙(虽然我承认没真正发现C++轻便过). 所以我放弃了这个想法.</p>

<p>但是C++0x的讲座使我再次思考. 一件事十分困扰我——我相信也困扰着Ken和Robert&#8212;&#8212;C++的新内存模型居然新增了原子类型! 为这个不堪重负的类型系统加上这么个极其细致的类型机制实在是不靠谱. 将语言和今日的硬件绑在一起似乎有点目光短浅并且不明智, 因为硬件过几年就有大变.</p>

<p>那场C++0x讲座结束之后, 我们回到办公室. 我开始了另一个编译(噗), 转过转过我的椅子, 面对Robert, 然后开始问一些尖锐的问题. 在编译完成之前, 我们拉拢了Ken, 并决定做些什么. 我们再也不想写C++了, 并且我们&#8212;&#8212;尤其是我&#8212;&#8212;在写Google代码时, 想让并发拿来就用. 同时我们也想解决&#8221;大系统编程&#8221;的问题, 容后细说.</p>

<p>我们在白板上写下一组我们需要的东西——迫切需要的那种. 我们规划出大体的轮廓, 忽略了语法细节和语义.</p>

<p>我仍然有一条碉堡了的那周的邮件线索. 这是一些摘录:</p>

<p>Robert: 起点: C, 修补一些显而易见的瑕疵, 去除繁杂的东西. 新增一些特性.</p>

<p>Rob: 命名为&#8217;go&#8217;. 你可以为这个名字编造各种理由, 但是它确实拥有很多好的特性. 它短小, 易于打出. 工具么: goc, gol, goa. 如果有个交互式调试器/解释器, 可以直接叫&#8217;go&#8217;. 代码后缀是.go.</p>

<p>Robert: 空接口: interface {}. 将被所有接口实现(译者: 原文如此), 并且可以取代void*.</p>

<p>我们并没有立即全部设计出来. 比如我们花了一年多才设计出了数组(array)和切片(slice). 不过相当一部分重要的设计在最初的几天中浮现.</p>

<p>注意到Robert说C是起点, 并非C++. 对于这点我不是很确定, 不过我相信他说的是C, 因为Ken在场(&#8230;). 但是最后我们并没有从C开始, 这倒是真的. 我们从最初的草稿开始, 仅仅从其它语言中借鉴琐碎的东西, 比如运算符, 各种括号和一些常见的关键字.(当然我们也借鉴了我们所知道的语言中的思想.)不管怎么说, 我们破而后立, 从头做起, 以此来响应C++. 我们并非想做一个更好的C++, 甚至不是一个更好的C. 它仅仅是一个对我们所关心的软件来说更好的语言.</p>

<p>最后, 我们得到了既不同于C也不同于C++的东西, 甚至比许多人意识到的还要不同. 我列了一个对于C和C++的Go的重要的简化的列表:</p>

<ul>
<li>常规的语法(不需要一个符号表来辅助解析)</li>
<li>GC机制(仅仅是GC)</li>
<li>没有头文件</li>
<li>显式依赖关系</li>
<li>没有循环依赖</li>
<li>数字常量仅仅是数字(译者: 没有类型)</li>
<li>int和int32不是同种类型</li>
<li>字母大小写将确定可见性</li>
<li>任何类型都可以有方法(没有类)</li>
<li>没有子类型继承(没有子类)</li>
<li>包级别的初始化和良好定义的初始化顺序</li>
<li>同一个包的文件一起编译</li>
<li>包级别的全局定义可以以任意顺序进行</li>
<li>没有算术类型转换(常量可以弥补)</li>
<li>接口是隐式实现的(没有&#8221;implements&#8221;声明)</li>
<li>嵌入的结构体(没有类型提升和子类)</li>
<li>方法像函数一样定义(不必定义在特殊的地方)</li>
<li>方法就是函数</li>
<li>接口就是方法(没有数据)</li>
<li>方法仅仅靠名字匹配(不是靠类型)</li>
<li>没有构造函数和析构函数</li>
<li>后置增量/减量运算符仅仅是语句, 而不是表达式</li>
<li>没有前置增量/减量运算符</li>
<li>赋值号是语句, 不是表达式</li>
<li>表达式求值顺序在赋值和函数调用时确定(没有所谓的&#8221;sequence point&#8221;)</li>
<li>没有指针算术</li>
<li>内存总是初始化为0</li>
<li>对本地变量取地址是合法的</li>
<li>方法中没有叫this的指针</li>
<li>分段式栈</li>
<li>没有常量或其它类型的注记</li>
<li>没有模板</li>
<li>没有异常</li>
<li>内建字符串, 切片和映射(map)</li>
<li>数组边界检查</li>
</ul>


<p>并且, 我相信通过这一系列的简化, Go将比C或C++更具有表现力. 少即是多.</p>

<p>但是我们没法一下子把所有部分都做出来. 我们需要构建最基础的部分, 比如说类型系统的表示, 能良好应用于实际的语法, 和一些无法形容的但能让库更容易相互操作的东西.</p>

<p>我们同样增加了C或C++中没有的东西, 比如切片和映射, 组合字面量(?), 文件顶层的表达式(这虽是件大事, 但是几乎不为人知), 反射机制, GC等等. 自然, 还有并发.</p>

<p>一个显眼的缺少的东西是类型的继承. 请允许我粗鲁一分钟.</p>

<p>早先构建Go的时候有人跟我说, 他无法想象用一门没有泛型的语言工作. 正如我在别处说明的那样, 我觉得这是个很诡异的言论.</p>

<p>公平起见, 他用自己的话说可能是他真的很喜欢C++中STL的那些容器. 以辩论为目的的话, 我们假定他说的为真.</p>

<p>他说的意味着: 他发现写一个容器, 比如以int为元素类型的链表, 或字符串映射是一种不能忍的重负. 我发现这是个很诡异的言论, 因为我几乎没把时间花在那些个问题上, 即使我在用没有泛型的语言.</p>

<p>但更重要的是, 他的意思是类型系统将会解除这种负担. <em>类型系统</em>. 不是多态函数, 或语言级原语, 或其它类型的辅助手段(helpers), 而仅仅是类型系统.</p>

<p>这就是我坚持的那个细节.</p>

<p>从C++或Java来Go的程序员怀念和类型系统在一起的日子, 特别是带继承和子类的那部分. 也许我在类型系统方面是门外汉, 但是我绝不觉得那套玩意非常具有表现力.</p>

<p>我已故的朋友Alain Fournier一次告诉我说他认为学术工作的最底层是分类学. 然后信不信由你, 类型继承正是分类学. 你必须决定哪个萝卜扔哪个坑里, 每个类型的父类型, A是否继承B或者B是否继承A. 一个可排序的数组是一个带有sort方法的数组呢, 还是一个长得像数组的排序器呢? 如果你觉得类型系统能解决所有设计上的问题, 你必须做出这个无意义的选择.</p>

<p>我相信对编程来说那是个荒诞的思路. 真正的重点不在于事物之间的继承关系, 而在于它们能提供些什么.</p>

<p>因此, 接口这个概念进入了Go. 但是它们都是主要部分&#8212;&#8212;真正的Go之道&#8212;&#8212;的一部分.</p>

<p>如果C++和Java注重类型继承和类型系统的分类学, 那么Go就注重组合.</p>

<p>Doug Mcilroy, Unix管道的最终发明人, 在1964年(!)写道:</p>

<blockquote><p>我们应该有一些机制能将程序耦合(串)起来, 像花园软管那样——当我们需要另一种方式传送数据时, 拧紧另外一段即可. I/O也可以这么做.</p></blockquote>

<p>这也是Go所提倡的道路. Go吸收这个观点, 然后把它推进得十分远. 这是一门关于(功能上的)组合和(调用上的)耦合的语言.</p>

<p>一个显然的例子是接口是组合各部分的途径. 关键是, 那些部分是什么并不重要, 如果某类型实现了M方法我就可以把这个方法填到接口里去.</p>

<p>另一个重要的例子是如何让并发性提供给我们不同的独立计算部分的组合.</p>

<p>并且还有一种不同寻常(但十分简单)的类型组合形式: 嵌入匿名结构体.</p>

<p>===================</p>

<p>我想提一个和之前不太相关的Go设计: Go被设计为大型团队用来写大型程序的语言.</p>

<p>这里有个概念是&#8221;大型编程&#8221;, 并且不知何故C++和Java主宰了这个领域. 我相信这只是因为其历史巧合, 或者是工业上的巧合. 但是被广泛接纳的观点是他们和面向对象设计有关.</p>

<p>我压根不相信这点. 大型软件需要确定的方法, 但是更重要的是它需要强依赖性管理, 干净的接口抽象和优越的文档工具. C++没一点做得好的(虽然Java明显要好很多).</p>

<p>我们还不知道Go语言能做到何种程度, 因为现在还没有足够的软件是用Go写的. 但是我非常有信心于Go将会成为一个优越的大型编程语言. 时间会说明一切的.</p>

<p>===================</p>

<p>现在, 回到我们演讲开始提的那个问题:</p>

<p>为什么Go, 作为从头被设计为符合C++使用者习惯的语言, 没有吸引很多C++程序员?</p>

<p>严肃点说, 我觉得是因为Go和C++在哲学方面有着巨大的不同.</p>

<p>C++是将所有东西提到你指尖上(译者: 即多范式). 我在C++11的FAQ上找到了这段引用:</p>

<blockquote><p>C++能优雅地, 灵活地, 零损耗地(相比于手工操纵代码)表达抽象的能力大幅提升了.</p></blockquote>

<p>Go并非这种&#8221;围绕式&#8221;的. 你并不需要所有的东西都内建好. 你不需要对每个执行细节进行精细的控制. 比如, 你不需要RAII, 但你拥有一个垃圾回收器, 也意味着你不需要执行释放内存的操作.</p>

<p>你得到的是一组非常强有力但易于理解, 易于用来构建积木的功能, 这些积木可以用来组合出一个你需要的问题的解法. 这并不意味着它能像别的一些语言创造的解法一样快速, 复杂, 或带来思想上的激励, 但是它总能保证易于书写, 易于阅读, 易于理解, 易于维护, 而且可能更安全.</p>

<p>换个角度说(当然过于简单地): Python和Ruby程序员转到Go, 因为他们不需要牺牲表达能力, 却获得了性能的提升, 并且能好好玩并发系统了.</p>

<p>C++程序员并没有转到Go是因为他们好不容易获得了对程序的精细控制, 并且不想牺牲它们的任何一部分. 对他们而言, 写软件不仅包括把事情做完, 而且包括用特定的方式完成.</p>

<p>关键是, 在将来, Go的成功将会颠覆他们的世界观.</p>

<p>并且从一开始我们就应该意识到这点. 对于C++11的新特性很兴奋的人们并不关心一个拥有如此少特性的语言. 即使最后他提供了如此多.</p>

<p>谢谢.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coursera Prolang总结3(Haskell的type class)]]></title>
    <link href="http://innocentim.github.io/blog/2013/04/10/coursera-prolang-3/"/>
    <updated>2013-04-10T20:48:00+08:00</updated>
    <id>http://innocentim.github.io/blog/2013/04/10/coursera-prolang-3</id>
    <content type="html"><![CDATA[<p>Dan说如果时间允许, Haskell也将被讨论. 当然, 时间总是不允许的.</p>

<p>于是我看完SML之后就很不知趣地去啃Haskell. 然后我现在就是一个接触Haskell累计不超过一周的水货, 但是这并不妨碍我发表一些无关痛痒(咦?)的并且很有可能失偏颇的断章取义的评论. Haskell和SML有不少相似的地方, 但是我今天想讨论的是其不同的地方. 最大的不同, 在我看来, 是Haskell允许用户定义type class.</p>

<p>有两个基本的前置科技要点 : 模板(C++)/泛型(Java或SML)和纯虚类(C++)/接口(Java).</p>

<p>我某天就遇到了Haskell的type class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="kr">class</span> <span class="kt">Eq</span> <span class="n">a</span> <span class="kr">where</span>
</span><span class='line'>    <span class="p">(</span><span class="o">==</span><span class="p">)</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class='line'>    <span class="p">(</span><span class="o">/=</span><span class="p">)</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">==</span> <span class="n">y</span> <span class="ow">=</span> <span class="n">not</span> <span class="p">(</span><span class="n">x</span> <span class="o">/=</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">/=</span> <span class="n">y</span> <span class="ow">=</span> <span class="n">not</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">y</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上一片代码描述了<em>一类类型</em>, 此类类型的值可以和同类比较是否相等. 代码逻辑由该类型自己实现(如同实现一个接口). 如果我们实现一个列表类型, 其相等操作是递归地比较每个相同位置的元素, 只有每个相对元素都相等时列表才相等:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="kr">data</span> <span class="kt">MyList</span> <span class="n">a</span> <span class="ow">=</span> <span class="kt">Cons</span> <span class="n">a</span> <span class="p">(</span><span class="kt">MyList</span> <span class="n">a</span><span class="p">)</span> <span class="o">|</span> <span class="kt">Empty</span>
</span><span class='line'>
</span><span class='line'><span class="kr">instance</span> <span class="p">(</span><span class="kt">Eq</span> <span class="n">k</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="kt">Eq</span> <span class="p">(</span><span class="kt">MyList</span> <span class="n">k</span><span class="p">)</span> <span class="kr">where</span>
</span><span class='line'>    <span class="kt">Cons</span> <span class="n">a</span> <span class="n">as</span> <span class="o">==</span> <span class="kt">Cons</span> <span class="n">b</span> <span class="n">bs</span> <span class="ow">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">as</span> <span class="o">==</span> <span class="n">bs</span><span class="p">)</span>
</span><span class='line'>    <span class="kt">Empty</span> <span class="o">==</span> <span class="kt">Empty</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class='line'>    <span class="kr">_</span> <span class="o">==</span> <span class="kr">_</span> <span class="ow">=</span> <span class="kt">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>data定义了列表类型(风格和SML一致); 而下面的instance表示MyList对于每个可比较的类型参数k, 可以定义自己的比较函数, 从而让自身成为可比较类型. 下面的where里是一个简单的pattern matching, 和SML的case一致.</p>

<p>如果没法获得一个确切的直观的印象, 请看Java版:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">Eq</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equal</span><span class="o">(</span><span class="n">T</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">List</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">Eq</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="kd">implements</span> <span class="n">Eq</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equal</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">a</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">equalEmpty</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">equalCons</span><span class="o">(</span><span class="n">Cons</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">a</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Cons</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">Eq</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="kd">extends</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">T</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Cons</span><span class="o">(</span><span class="n">T</span> <span class="n">data</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equal</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">b</span><span class="o">.</span><span class="na">equalCons</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">equalCons</span><span class="o">(</span><span class="n">Cons</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">cons</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">data</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">cons</span><span class="o">.</span><span class="na">data</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">next</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">cons</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">equalEmpty</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Empty</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">Eq</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="kd">extends</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equal</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">b</span><span class="o">.</span><span class="na">equalEmpty</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">equalCons</span><span class="o">(</span><span class="n">Cons</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">equalEmpty</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不幸的是这个例子包含了不止一个知识 : <strong>double dispatch</strong>和<strong>bounded polymorphism</strong>. 但是反正这些东西都挺有意思的, 不妨一并学了吧:</p>

<p><strong>double dispatch</strong> : 这个例子中, List有两种实际情况 : <code>Cons</code>和<code>Empty</code>. 于是<code>equal</code>事实上是一个多态函数 : <code>Cons</code>和<code>Cons</code>比, <code>Cons</code>和<code>Empty</code>比, <code>Empty</code>和<code>Cons</code>比, <code>Empty</code>和<code>Empty</code>比. 考虑<code>someEmpty.equal(b)</code>的状况, 我并不知道<code>b</code>是<code>Empty</code>还是<code>Cons</code>, 虽然我知道自己是<code>Empty</code>; 我们必须写4个辅助函数来实现这四位的逻辑, 然后在<code>equal</code>中只做<code>dispatch</code>. 这时候我们就要做第二次dispatch(跳<code>equal</code>虚函数是第一次), 执行<code>b.equalEmpty()</code>来告诉b, 有个<code>Empty</code>要跟你比. 和Dan的观点一致, 我觉得这丑暴了. 一个函数最好<em>do one thing and do it well</em>, 这本来连成一片的逻辑, 最好还是用一个大的<code>switch (type)</code>来解决. 这肯定会被说&#8221;不够OOP&#8221;, 不过反正我不稀罕&#8230;</p>

<p><strong>bounded polymorphism</strong> : 很简单 &#8212;&#8212; 泛型参数不再是接受类型全集. 过去Java里有<code>class ClassName&lt;T&gt;</code>, 现在有这样的写法 : <code>class ClassName&lt;T extends ClassName2&gt;</code>. 这就提醒编译器<code>T</code>是可以被限制的. 这样T也就可以使用<code>ClassName2</code>所拥有的功能了. C++里对应的概念就叫concepts, 不过还没进入标准>.&lt;</p>

<p>Java可以通过泛型接口来实现type class. 但是这不完全一样 :</p>

<p>1) 为了达成和double dispatch一样的功能, Haskell的类型系统有BNF风格的机制, 直接秒杀继承机制;</p>

<p>2) 为了达成&#8221;类型A is-a 类型B&#8221;, Haskell没有像Java那样通过继承(实现接口), 而是通过泛型参数的传入(List is-a Eq). 区别在哪呢? 直观地讲, Java里总有个甩不掉的this, 而Haskell里没有. 为什么要有this呢? 没有this就是一个全局函数(Java里没有, C++里有); 不知道这个函数属于哪个类, 就算这个函数实现了某个接口里的方法, 也不知道哪个类能使用这个接口, 即没法提供&#8221;A is a B&#8221;这样的信息, 由于A的缺失; 那反正只要想个办法把A搞出来就行了. Mixin是一个不错的尝试, 它允许让用户指定一个函数属于多个类来产生类型约束, 但是这还是没有脱离让用户指定&#8221;这个函数属于某个类&#8221;来在实现接口的时候提供有用的类型约束. Haskell的提供约束的方式 &#8212;&#8212; 现在很显然了 &#8212;&#8212; 通过类型推导自动确定! 因为我们很容易判断一个函数原型是不是另一个函数原型的具体化. 比如lessThan(int, int)就是lessThan(T, T)的具体化(T是泛型). 这就为&#8221;类型int就是lessThan所属的那个type class的一个成员&#8221;提供了支持.</p>

<p>所以总结一下, type class 是这样的 :
是泛型接口, 但是不是靠继承(即把this这个参数揪出来瞎搞)来产生接口约束, 而是靠泛型参数来产生.</p>

<p>现在, 你看到了继承机制的生硬的设定了么?</p>

<p>如果我们把a.b(c)看成b(a, c), 那么类型系统会<em>仅</em>通过第一个参数的类型来产生各种约束. 为什么C++/Java要通过这种近乎hack的手段来突破类型系统呢? 啊哈, 原来是C++/Java不会做类型推导! 确实, C++的模板参数在很多情况下, 明明能推导出来, 但是就是要你手填T_T.</p>

<p>在有强大的类型推导的语言里, 我们完全可以通过更灵活的策略来产生约束, 正如Haskell做的那样.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coursera Prolang总结2(实现SML中的类型推导)]]></title>
    <link href="http://innocentim.github.io/blog/2013/03/24/coursera-prolang-2/"/>
    <updated>2013-03-24T09:27:00+08:00</updated>
    <id>http://innocentim.github.io/blog/2013/03/24/coursera-prolang-2</id>
    <content type="html"><![CDATA[<p>SML是一门静态类型语言, 但是将值绑定新变量的时候可以不指定变量的类型. 这意味着每个变量都是&#8221;尽可能地宽松&#8221;, 比如变量x, 开始时为范型&#8217;a, 但是编译器扫到一个a+1的表达式之后, 会自动把x的类型约束为int, 因为加号+的类型是int * int -> int, 即吃一个(int, int)的元组, 返回一个int.</p>

<p>于是自动类型推导就成为一个有意思的活. 我刻意不去查阅相关资料, 做了些思考.</p>

<p>要解决的问题是: 给定n个函数定义, 要推导出这n个函数的类型, 包括参数类型和返回类型.</p>

<p>可以采用待定系数法类似的思路, 先设n个函数各类型为不同的范型参数a1, r1, a2, r2 &#8230; an, rn.</p>

<p>现在, n个函数体就是对这2n个变量的约束. 函数体是一个表达式. 表达式分为if, let, case &#8230;等, 还有函数调用. 每个表达式都有可能包含一些别的表达式.</p>

<p>if产生的约束比较简单, 即要求condition的返回值类型是bool, 要求then分支的返回值类型等于else分支的返回值类型.</p>

<p>let也比较简单, 即binding的类型为相应expression返回类型; 整个表达式返回类型为in块中表达式返回类型.</p>

<p>case稍微复杂些. 首先, patterns能对一个未完全确定的变量(通常是参数或其一部分)提供约束, 这部分在Coursera Prolang的作业中出现; 另外必须保证所有分支的expression的返回值一样, 并且这就是case表达式的返回类型.</p>

<p>函数调用是比较意思的地方. 我们只需要整理出一个巨大的约束集即可, 集合的每个元素形式是: 类型A要能接受类型B. 这里的A和B都可以是&#8221;未完成推导的&#8221;, 也可是是完成了的. 无论如何, A和B都将变成A和B的交集. 这种变化会产生连锁效应, 所以我们应该紧接着更新A的邻居和B的邻居. 这用教科书的话说叫Bellman-Ford, 用咱们的话说叫SPFA :P. 最终当迭代到不动的时候, 推导就完成了.</p>

<p>所以我们需要能将两个类型求交集的能力. 我们把类型们分为两种: 已推导出和未推导出. 已推导出的肯定不能动; 未推导出的会把自己下降到能满足已推导约束的地步, 并且尽量lenient(Dan用的这个词). 如果两个都未推导出来, 那就互相下降自己的分支来满足对方相应的分支(一个类型的结构是一棵树); 当两个范型碰头的时候, 他们会变成同一个.</p>

<p>然后我觉得就没有然后了. 可惜暂时不会去实现它>.&lt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coursera Prolang总结1(SML)]]></title>
    <link href="http://innocentim.github.io/blog/2013/03/23/coursera-prolang-1/"/>
    <updated>2013-03-23T09:33:00+08:00</updated>
    <id>http://innocentim.github.io/blog/2013/03/23/coursera-prolang-1</id>
    <content type="html"><![CDATA[<p>Coursera的<a href="https://class.coursera.org/proglang-2012-001/class/index">Programming Languages</a>是个难得的好课. 虽然课时较短, 时间仓促, 但是它确实提供了高密度的知识吸收, 并且让我更谦卑. Instructor是University of Washington的Dan Grossman, 一个讲课非常热情的老师(横向地, Compilers的老师就没这么激情:P). 这门课通过分析三门语言 : SML, Racket 和 Ruby, 介绍了很多程序语言概念, 从而让我对语言设计积攒了更多经验值. 这绝对比自己看语言们的tutorials划得来.</p>

<p>下面是我从SML的学习中获得的经验的不完全列表:</p>

<h3>一种更为神奇的变量绑定方式</h3>

<p>函数对非参数变量的捕捉被设计为在定义时捕捉好值, 此后便不再改变(更immutable). 这使得函数在执行时根本不关心外围环境, 更优雅, 更利于分析和优化(当然也更inexpressive).</p>

<h3>Pattern Matching</h3>

<p>Pattern Matching很像一个constructor的逆运算, 也许可以称作destructor :). 这里的constructor当然不是主流语言中那么随意的一个函数, 而是产生新类型的一种方式. 一个constructor创建一种新的类型, 并可以用BNF风格的语法定义该类型.</p>

<p>一个典型的例子是定义<code>List 'a := EmptyList | Cons 'a * ('a List)</code>. 这样便定义了一个范型类型<code>List</code>, 而该类型有两个构造函数, 即<code>EmptyList</code>和<code>Cons</code>.</p>

<p>这种构造函数本身没什么逻辑可言, 就是负责类型的转换. 但是就是因为足够简单, 他们是可逆的 : <code>Cons</code>负责包装一个<code>'a * ('a List)</code>(star表示元组), 而在模式匹配中, 轻易地, <code>Cons (head, tail) =&gt; someList</code>将轻易地拆分someList这个元组并将相应成员填充到指定变量head和tail中.</p>

<p>我们知道BNF可以描述上下文无关文法, 强大到足以描述很多语言; 这恰恰为SML提供了很强的数据结构包装器和解包器.</p>

<h3>非常赞的类型系统</h3>

<p>SML拥有&#8221;每个函数体是一个表达式&#8221;和&#8221;每个表达式有确定的返回类型&#8221;这种强约束. 这带来的直接后果是写SML代码比较难编译通过, 但是一旦编译通过就很少有错误.</p>

<p>为了更expressive, SML有范型系统. 不像C++丑陋的模板系统, SML能完美地推断出每个类型参数是什么或者哪类类型, 每个函数调用填入了什么类型, 将哪个类型参数绑定到哪个具体类型上了. 这极大地弥补了强类型系统的completeness而且没怎么降低soundness.</p>

<p>关于在强约束下做函数定义的类型推断, 请<a href="http://innocentim.github.io/blog/2013/04/12/coursera-prolang-2/">参看这篇</a>&#8230;</p>

<p>顺带说一句, SML主流的缩进风格让我非常难受 : 他们很容易让我写出很靠右的代码(这种&#8221;一句话描述函数体&#8221;的语言似乎都有这个毛病). 相比之下C/C++规整的indent level更吸引人. 我还想起了Emacs有个叫SmartTab的插件倡导&#8221;用Tab表示indent level, 用空格对齐&#8221;噗.</p>

<p>Dan is awesome!</p>
]]></content>
  </entry>
  
</feed>
