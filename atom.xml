<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lambda Not Found]]></title>
  <link href="http://innocentim.github.io/atom.xml" rel="self"/>
  <link href="http://innocentim.github.io/"/>
  <updated>2013-04-12T22:37:29+08:00</updated>
  <id>http://innocentim.github.io/</id>
  <author>
    <name><![CDATA[Tim Shen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Coursera Prolang总结3(Haskell的type class)]]></title>
    <link href="http://innocentim.github.io/blog/2013/04/10/coursera-prolang-3/"/>
    <updated>2013-04-10T20:48:00+08:00</updated>
    <id>http://innocentim.github.io/blog/2013/04/10/coursera-prolang-3</id>
    <content type="html"><![CDATA[<p>Dan说如果时间允许, Haskell也将被讨论. 当然, 时间总是不允许的.</p>

<p>于是我看完SML之后就很不知趣地去啃Haskell. 然后我现在就是一个接触Haskell累计不超过一周的水货, 但是这并不妨碍我发表一些无关痛痒(咦?)的并且很有可能失偏颇的断章取义的评论. Haskell和SML有不少相似的地方, 但是我今天想讨论的是其不同的地方. 最大的不同, 在我看来, 是Haskell允许用户定义type class.</p>

<p>有两个基本的前置科技要点 : 模板(C++)/泛型(Java或SML)和纯虚类(C++)/接口(Java).</p>

<p>我某天就遇到了Haskell的type class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="kr">class</span> <span class="kt">Eq</span> <span class="n">a</span> <span class="kr">where</span>
</span><span class='line'>    <span class="p">(</span><span class="o">==</span><span class="p">)</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class='line'>    <span class="p">(</span><span class="o">/=</span><span class="p">)</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">==</span> <span class="n">y</span> <span class="ow">=</span> <span class="n">not</span> <span class="p">(</span><span class="n">x</span> <span class="o">/=</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">/=</span> <span class="n">y</span> <span class="ow">=</span> <span class="n">not</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">y</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上一片代码描述了<em>一类类型</em>, 此类类型的值可以和同类比较是否相等. 代码逻辑由该类型自己实现(如同实现一个接口). 如果我们实现一个列表类型, 其相等操作是递归地比较每个相同位置的元素, 只有每个相对元素都相等时列表才相等:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="kr">data</span> <span class="kt">MyList</span> <span class="n">a</span> <span class="ow">=</span> <span class="kt">Cons</span> <span class="n">a</span> <span class="p">(</span><span class="kt">MyList</span> <span class="n">a</span><span class="p">)</span> <span class="o">|</span> <span class="kt">Empty</span>
</span><span class='line'>
</span><span class='line'><span class="kr">instance</span> <span class="p">(</span><span class="kt">Eq</span> <span class="n">k</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="kt">Eq</span> <span class="p">(</span><span class="kt">MyList</span> <span class="n">k</span><span class="p">)</span> <span class="kr">where</span>
</span><span class='line'>    <span class="kt">Cons</span> <span class="n">a</span> <span class="n">as</span> <span class="o">==</span> <span class="kt">Cons</span> <span class="n">b</span> <span class="n">bs</span> <span class="ow">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">as</span> <span class="o">==</span> <span class="n">bs</span><span class="p">)</span>
</span><span class='line'>    <span class="kt">Empty</span> <span class="o">==</span> <span class="kt">Empty</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class='line'>    <span class="kr">_</span> <span class="o">==</span> <span class="kr">_</span> <span class="ow">=</span> <span class="kt">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>data定义了列表类型(风格和SML一致); 而下面的instance表示MyList对于每个可比较的类型参数k, 可以定义自己的比较函数, 从而让自身成为可比较类型. 下面的where里是一个简单的pattern matching, 和SML的case一致.</p>

<p>如果没法获得一个确切的直观的印象, 请看Java版:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">Eq</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equal</span><span class="o">(</span><span class="n">T</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">List</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">Eq</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="kd">implements</span> <span class="n">Eq</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equal</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">a</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">equalEmpty</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">equalCons</span><span class="o">(</span><span class="n">Cons</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">a</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Cons</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">Eq</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="kd">extends</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">T</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Cons</span><span class="o">(</span><span class="n">T</span> <span class="n">data</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equal</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">b</span><span class="o">.</span><span class="na">equalCons</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">equalCons</span><span class="o">(</span><span class="n">Cons</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">cons</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">data</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">cons</span><span class="o">.</span><span class="na">data</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">next</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">cons</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">equalEmpty</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Empty</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">Eq</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="kd">extends</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equal</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">b</span><span class="o">.</span><span class="na">equalEmpty</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">equalCons</span><span class="o">(</span><span class="n">Cons</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">equalEmpty</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不幸的是这个例子包含了不止一个知识 : <strong>double dispatch</strong>和<strong>bounded polymorphism</strong>. 但是反正这些东西都挺有意思的, 不妨一并学了吧:</p>

<p><strong>double dispatch</strong> : 这个例子中, List有两种实际情况 : <code>Cons</code>和<code>Empty</code>. 于是<code>equal</code>事实上是一个多态函数 : <code>Cons</code>和<code>Cons</code>比, <code>Cons</code>和<code>Empty</code>比, <code>Empty</code>和<code>Cons</code>比, <code>Empty</code>和<code>Empty</code>比. 考虑<code>someEmpty.equal(b)</code>的状况, 我并不知道<code>a</code>是<code>Empty</code>还是<code>Cons</code>, 虽然我知道自己是<code>Empty</code>; 我们必须写4个辅助函数来实现这四位的逻辑, 然后在<code>equal</code>中只做<code>dispatch</code>. 这时候我们就要做第二次dispatch(跳<code>equal</code>虚函数是第一次), 执行<code>b.equalEmpty()</code>来告诉b, 有个<code>Empty</code>要跟你比. 和Dan的观点一致, 我觉得这丑暴了. 一个函数最好<em>do one thing and do it well</em>, 这本来连成一片的逻辑, 最好还是用一个大的<code>switch (type)</code>来解决. 这肯定会被说&#8221;不够OOP&#8221;, 不过反正我不稀罕&#8230;</p>

<p><strong>bounded polymorphism</strong> : 很简单 &#8212;&#8212; 泛型参数不再是接受类型全集. 过去Java里有<code>class ClassName&lt;T&gt;</code>, 现在有这样的写法 : <code>class ClassName&lt;T extends ClassName2&gt;</code>. 这就提醒编译器<code>T</code>是可以被限制的. 这样T也就可以使用<code>ClassName2</code>所拥有的功能了. C++里对应的概念就叫concepts, 不过还没进入标准>.&lt;</p>

<p>Java可以通过泛型接口来实现type class. 但是这不完全一样 :</p>

<p>1) 为了达成和double dispatch一样的功能, Haskell的类型系统有BNF风格的机制, 直接秒杀继承机制;</p>

<p>2) 为了达成&#8221;类型A is-a 类型B&#8221;, Haskell没有像Java那样通过继承(实现接口), 而是通过泛型参数的传入(List is-a Eq). 区别在哪呢? 直观地讲, Java里总有个甩不掉的this, 而Haskell里没有. 为什么要有this呢? 没有this就是一个全局函数(Java里没有, C++里有); 不知道这个函数属于哪个类, 就算这个函数实现了某个接口里的方法, 也不知道哪个类能使用这个接口, 即没法提供&#8221;A is a B&#8221;这样的信息, 由于A的缺失; 那反正只要想个办法把A搞出来就行了. Mixin是一个不错的尝试, 它允许让用户指定一个函数属于多个类来产生类型约束, 但是这还是没有脱离让用户指定&#8221;这个函数属于某个类&#8221;来在实现接口的时候提供有用的类型约束. Haskell的提供约束的方式 &#8212;&#8212; 现在很显然了 &#8212;&#8212; 通过类型推导自动确定! 因为我们很容易判断一个函数原型是不是另一个函数原型的具体化. 比如lessThan(int, int)就是lessThan(T, T)的具体化(T是泛型). 这就为&#8221;类型int就是lessThan所属的那个type class的一个成员&#8221;提供了支持.</p>

<p>所以总结一下, type class 是这样的 :
是泛型接口, 但是不是靠继承(即把this这个参数揪出来瞎搞)来产生接口约束, 而是靠泛型参数来产生.</p>

<p>现在, 你看到了继承机制的生硬的设定了么?</p>

<p>如果我们把a.b(c)看成b(a, c), 那么类型系统会<em>仅</em>通过第一个参数的类型来产生各种约束. 为什么C++/Java要通过这种近乎hack的手段来突破类型系统呢? 啊哈, 原来是C++/Java不会做类型推导! 确实, C++的模板参数在很多情况下, 明明能推导出来, 但是就是要你手填T_T.</p>

<p>在有强大的类型推导的语言里, 我们完全可以通过更灵活的策略来产生约束, 正如Haskell做的那样.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coursera Prolang总结2(实现SML中的类型推导)]]></title>
    <link href="http://innocentim.github.io/blog/2013/03/24/coursera-prolang-2/"/>
    <updated>2013-03-24T09:27:00+08:00</updated>
    <id>http://innocentim.github.io/blog/2013/03/24/coursera-prolang-2</id>
    <content type="html"><![CDATA[<p>SML是一门静态类型语言, 但是将值绑定新变量的时候可以不指定变量的类型. 这意味着每个变量都是&#8221;尽可能地宽松&#8221;, 比如变量x, 开始时为范型&#8217;a, 但是编译器扫到一个a+1的表达式之后, 会自动把x的类型约束为int, 因为加号+的类型是int * int -> int, 即吃一个(int, int)的元组, 返回一个int.</p>

<p>于是自动类型推导就成为一个有意思的活. 我刻意不去查阅相关资料, 做了些思考.</p>

<p>要解决的问题是: 给定n个函数定义, 要推导出这n个函数的类型, 包括参数类型和返回类型.</p>

<p>可以采用待定系数法类似的思路, 先设n个函数各类型为不同的范型参数a1, r1, a2, r2 &#8230; an, rn.</p>

<p>现在, n个函数体就是对这2n个变量的约束. 函数体是一个表达式. 表达式分为if, let, case &#8230;等, 还有函数调用. 每个表达式都有可能包含一些别的表达式.</p>

<p>if产生的约束比较简单, 即要求condition的返回值类型是bool, 要求then分支的返回值类型等于else分支的返回值类型.</p>

<p>let也比较简单, 即binding的类型为相应expression返回类型; 整个表达式返回类型为in块中表达式返回类型.</p>

<p>case稍微复杂些. 首先, patterns能对一个未完全确定的变量(通常是参数或其一部分)提供约束, 这部分在Coursera Prolang的作业中出现; 另外必须保证所有分支的expression的返回值一样, 并且这就是case表达式的返回类型.</p>

<p>函数调用是比较意思的地方. 我们只需要整理出一个巨大的约束集即可, 集合的每个元素形式是: 类型A要能接受类型B. 这里的A和B都可以是&#8221;未完成推导的&#8221;, 也可是是完成了的. 无论如何, A和B都将变成A和B的交集. 这种变化会产生连锁效应, 所以我们应该紧接着更新A的邻居和B的邻居. 这用教科书的话说叫Bellman-Ford, 用咱们的话说叫SPFA :P. 最终当迭代到不动的时候, 推导就完成了.</p>

<p>所以我们需要能将两个类型求交集的能力. 我们把类型们分为两种: 已推导出和未推导出. 已推导出的肯定不能动; 未推导出的会把自己下降到能满足已推导约束的地步, 并且尽量lenient(Dan用的这个词). 如果两个都未推导出来, 那就互相下降自己的分支来满足对方相应的分支(一个类型的结构是一棵树); 当两个范型碰头的时候, 他们会变成同一个.</p>

<p>然后我觉得就没有然后了. 可惜暂时不会去实现它>.&lt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coursera Prolang总结1(SML)]]></title>
    <link href="http://innocentim.github.io/blog/2013/03/23/coursera-prolang-1/"/>
    <updated>2013-03-23T09:33:00+08:00</updated>
    <id>http://innocentim.github.io/blog/2013/03/23/coursera-prolang-1</id>
    <content type="html"><![CDATA[<p>Coursera的<a href="https://class.coursera.org/proglang-2012-001/class/index">Programming Languages</a>是个难得的好课. 虽然课时较短, 时间仓促, 但是它确实提供了高密度的知识吸收, 并且让我更谦卑. Instructor是University of Washington的Dan Grossman, 一个讲课非常热情的老师(横向地, Compilers的老师就没这么激情:P). 这门课通过分析三门语言 : SML, Racket 和 Ruby, 介绍了很多程序语言概念, 从而让我对语言设计积攒了更多经验值. 这绝对比自己看语言们的tutorials划得来.</p>

<p>下面是我从SML的学习中获得的经验的不完全列表:</p>

<h3>一种更为神奇的变量绑定方式</h3>

<p>函数对非参数变量的捕捉被设计为在定义时捕捉好值, 此后便不再改变(更immutable). 这使得函数在执行时根本不关心外围环境, 更优雅, 更利于分析和优化(当然也更inexpressive).</p>

<h3>Pattern Matching</h3>

<p>Pattern Matching很像一个constructor的逆运算, 也许可以称作destructor :). 这里的constructor当然不是主流语言中那么随意的一个函数, 而是产生新类型的一种方式. 一个constructor创建一种新的类型, 并可以用BNF风格的语法定义该类型.</p>

<p>一个典型的例子是定义<code>List 'a := EmptyList | Cons 'a * ('a List)</code>. 这样便定义了一个范型类型<code>List</code>, 而该类型有两个构造函数, 即<code>EmptyList</code>和<code>Cons</code>.</p>

<p>这种构造函数本身没什么逻辑可言, 就是负责类型的转换. 但是就是因为足够简单, 他们是可逆的 : <code>Cons</code>负责包装一个<code>'a * ('a List)</code>(star表示元组), 而在模式匹配中, 轻易地, <code>Cons (head, tail) =&gt; someList</code>将轻易地拆分someList这个元组并将相应成员填充到指定变量head和tail中.</p>

<p>我们知道BNF可以描述上下文无关文法, 强大到足以描述很多语言; 这恰恰为SML提供了很强的数据结构包装器和解包器.</p>

<h3>非常赞的类型系统</h3>

<p>SML拥有&#8221;每个函数体是一个表达式&#8221;和&#8221;每个表达式有确定的返回类型&#8221;这种强约束. 这带来的直接后果是写SML代码比较难编译通过, 但是一旦编译通过就很少有错误.</p>

<p>为了更expressive, SML有范型系统. 不像C++丑陋的模板系统, SML能完美地推断出每个类型参数是什么或者哪类类型, 每个函数调用填入了什么类型, 将哪个类型参数绑定到哪个具体类型上了. 这极大地弥补了强类型系统的completeness而且没怎么降低soundness.</p>

<p>关于在强约束下做函数定义的类型推断, 请<a href="http://innocentim.github.io/blog/2013/04/12/coursera-prolang-2/">参看这篇</a>&#8230;</p>

<p>顺带说一句, SML主流的缩进风格让我非常难受 : 他们很容易让我写出很靠右的代码(这种&#8221;一句话描述函数体&#8221;的语言似乎都有这个毛病). 相比之下C/C++规整的indent level更吸引人. 我还想起了Emacs有个叫SmartTab的插件倡导&#8221;用Tab表示indent level, 用空格对齐&#8221;噗.</p>

<p>Dan is awesome!</p>
]]></content>
  </entry>
  
</feed>
